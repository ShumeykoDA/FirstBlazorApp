@page "/todo"
@using FirstBlazorApp.Models;
@using FirstBlazorApp.Services
@inject DateTimeService _dateTimeService;

<ul>
    @foreach(ToDoItem todo in _todos){
        <li>
            <span>@todo.Text</span>
            @if (@todo.DueTime != null)
            {
                <span> ( due: @_dateTimeService.DateTimeToString(@todo.DueTime))</span>
            }
        </li>
    }
</ul>

@*<input @bind="_newToDo" @bind:event="oninput" placeholder="What do you need to do?" />
<input @bind="_dueDate" placeholder="Due Date" />*@
<RadzenTextBox @bind-Value="_newToDo" Placeholder="What do you need to do?"></RadzenTextBox>
<RadzenDatePicker TValue="DateTime?" @bind-Value="_dueDate" DateFormat="yyyy-MM-dd" ShowTime="false"
    Placeholder="Due Date"
    AllowClear="true"
></RadzenDatePicker>
<RadzenButton Click="Save">Save</RadzenButton>

@if (!string.IsNullOrEmpty(_newToDo))
{
    <p>@_newToDo Due: @_dueDate?.ToShortDateString()</p>
}


@code {
    private string _newToDo = String.Empty;
    private DateTime? _dueDate = null;
    
    private List<ToDoItem> _todos = new List<ToDoItem>()
    {
        new ToDoItem(Guid.NewGuid(), "Buy milk"),
        new ToDoItem(Guid.NewGuid(), "Buy meat"),
        new ToDoItem(Guid.NewGuid(), "Return book to library", new DateTime(2022, 02, 27)),
    };

    private void Save()
    {
        if (!string.IsNullOrEmpty(_newToDo))
        {
            _todos.Add(new ToDoItem(Guid.NewGuid(), _newToDo, _dueDate));
            _newToDo = string.Empty;
            _dueDate = null;
        }
    }
}
