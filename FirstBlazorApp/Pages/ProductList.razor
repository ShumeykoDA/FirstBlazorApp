@page "/products"
@using System.Linq.Dynamic.Core
@using Fluxor
@using FirstBlazorApp.Models;
@using FirstBlazorApp.Store.Actions
@using FirstBlazorApp.Store.Products.Actions
@using FirstBlazorApp.Store.Products.Services
@using FirstBlazorApp.Store.Products.States
@using FirstBlazorApp.Store.States
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IDispatcher _dispatcher
@inject ProductService _productService

<RadzenButton Disabled="Creating"
    class="btn btn-primary"
    Click="CreateRandomProductButton"
>
    Create Random Product
</RadzenButton> 
<RadzenButton Disabled="Creating || Loading"
    class="btn btn-primary"
    Click="RandomizeExample"          
>
    Randomize Example
</RadzenButton>

<RadzenDataGrid TItem="Product" 
    Data="Products"
    @ref="_dataGrid" RowSelect="p => _selected = p"
    AllowVirtualization="true" AllowFiltering="true" AllowSorting="true"
    Style="height:300px"
    IsLoading="Loading"
>
    <Columns>
        <RadzenDataGridColumn TItem="Product" Property="Name" Title="Name"></RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Product" Property="Price" Title="Price"></RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Product" Property="Stock" Title="Stock"></RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Product" Property="Unit" Title="Unit"></RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Product" Title="Actions">
            <Template Context="product">
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" class="m-1"
                    Click="@(args => ClickDeleteButton(product))"
                    @onclick:stopPropagation="true"      
                >
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {

    private RadzenDataGrid<Product>? _dataGrid;
    private Product? _selected;
    
    private IEnumerable<Product> Products => _productService.Products;
    private IEnumerable<Product> _query = null;
    private int _count = 0;
    private bool Creating => _productService.Creating;
    private bool Deleting => _productService.Deleting;
    private bool Updating => _productService.Updating;
    private bool Loading  => _productService.Loading;

    private List<string> _fruitNames = new List<string>()
    {
        "apple", "apricot", "avocado", "banana", "bell pepper", "bilberry", "blackberry", "blackcurrant", "blood orange",
        "blueberry", "boysenberry", "breadfruit", "canary melon", "cantaloupe", "cherimoya", "cherry", "chili pepper",
        "clementine", "cloudberry", "coconut", "cranberry", "cucumber", "currant", "damson", "date", "dragonfruit",
        "durian", "eggplant", "elderberry", "feijoa", "fig", "goji berry", "gooseberry", "grape", "grapefruit", "guava",
        "honeydew", "huckleberry", "jackfruit", "jambul", "jujube", "kiwi fruit", "kumquat", "lemon", "lime", "loquat",
        "lychee", "mandarine", "mango", "mulberry", "nectarine", "nut", "olive", "orange", "papaya", "passionfruit",
        "peach", "pear", "persimmon", "physalis", "pineapple", "plum", "pomegranate", "pomelo", "purple mangosteen",
        "quince", "raisin", "rambutan", "raspberry", "redcurrant", "rock melon", "salal berry", "satsuma", "star fruit",
        "strawberry", "tamarillo", "tangerine", "tomato", "ugli fruit", "watermelon"
    };

    private void AddToStock(Product product) {
        product.Stock++;
    }

    private void RemoveFromStock(Product product) {
        if (product.Stock > 1) {
            product.Stock--;
        } else {
            product.Stock = 0;
        }
    }

    private void CreateRandomProductButton(EventArgs eventArgs)
    {
        Product product = new Product(
            Guid.NewGuid(),
            _fruitNames[new Random().Next(0, _fruitNames.Count - 1)],
            (decimal) ((float) new Random().Next(1, 100) / 10),
            (decimal) ((float) new Random().Next(1, 100) / 10)
        );
        _dispatcher.Dispatch(new CreateProduct(product));
    }

    private void RandomizeExample()
    {
        _productService.RandomizeExample();
    }

    private void ClickDeleteButton(Product product)
    {
        _productService.DeleteProduct(product);
    }

    private void LoadData(LoadDataArgs args)
    {
        Console.WriteLine("LoadData End...");
        Console.WriteLine("LoadData Begin...");
        Console.WriteLine($"Skip: {args.Skip ?? 0}");
        Console.WriteLine($"Top: {args.Top ?? 16}");
        _query = Products
            .Skip(args.Skip ?? 0)
            .Take(args.Top ?? 16)
            .ToList();
        _count = Products.Count();
        Console.WriteLine($"_query={_query.Count()}");
        Console.WriteLine($"Products Count: {_count}");
        Console.WriteLine("LoadData End...");
        /**/
    }
    
}