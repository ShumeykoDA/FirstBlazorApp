@page "/products"
@using FirstBlazorApp.Models;
@using FirstBlazorApp.Store.Actions
@using FirstBlazorApp.Store.Products.Actions
@using FirstBlazorApp.Store.Products.States
@using FirstBlazorApp.Store.States
@using Fluxor
@inject IDispatcher _dispatcher
@inject IState<ProductState> _productState

<button class="btn btn-primary" @onclick="CreateRandomProductButton">Create Random Product</button>

<table class="table">
    <thead>
        <tr>
            <th>#</th>
            <th>Product</th>
            <th>Stock</th>
            <th>Actions</th>
            <th>Price (&#8381;)</th>
        </tr>
    </thead>
    <tbody>
        @{int idx = 0;}
        @foreach (Product product in Products)
        {
            idx++;
            <tr @onmouseover="@(e => FocusProduct(@product))" @onmouseout="@(e => UnfocusProduct())">
                <td>@idx</td>
                <td>@product.Name</td>
                <td>@product.Stock&nbsp;@if(@product.Unit != ""){<span>@product.Unit</span>}</td>
                <td>
                    @if(FocusedProduct == product) {
                        <button class="btn btn-primary btn-sm" @onclick="@(e => AddToStock(@product))">+</button>
                        <button class="btn btn-primary btn-sm" @onclick="@(e => RemoveFromStock(@product))">-</button>
                    }
                </td>
                <td>@product.Price &#8381;</td>
            </tr>
        }
    </tbody>
</table>

@code {

    private List<Product> Products => _productState.Value.Ids
        .Select(id => _productState.Value.Entities[id])
        .ToList();

    private Product? FocusedProduct;
    
    private List<string> _fruitNames = new List<string>()
    {
        "apple", "apricot", "avocado", "banana", "bell pepper", "bilberry", "blackberry", "blackcurrant", "blood orange",
        "blueberry", "boysenberry", "breadfruit", "canary melon", "cantaloupe", "cherimoya", "cherry", "chili pepper",
        "clementine", "cloudberry", "coconut", "cranberry", "cucumber", "currant", "damson", "date", "dragonfruit",
        "durian", "eggplant", "elderberry", "feijoa", "fig", "goji berry", "gooseberry", "grape", "grapefruit", "guava",
        "honeydew", "huckleberry", "jackfruit", "jambul", "jujube", "kiwi fruit", "kumquat", "lemon", "lime", "loquat",
        "lychee", "mandarine", "mango", "mulberry", "nectarine", "nut", "olive", "orange", "papaya", "passionfruit",
        "peach", "pear", "persimmon", "physalis", "pineapple", "plum", "pomegranate", "pomelo", "purple mangosteen",
        "quince", "raisin", "rambutan", "raspberry", "redcurrant", "rock melon", "salal berry", "satsuma", "star fruit",
        "strawberry", "tamarillo", "tangerine", "tomato", "ugli fruit", "watermelon"
    };

    private void AddToStock(Product product) {
        product.Stock++;
    }

    private void RemoveFromStock(Product product) {
        if (product.Stock > 1) {
            product.Stock--;
        } else {
            product.Stock = 0;
        }
    }

    private void FocusProduct(Product product) {
        if (FocusedProduct != product) {
            FocusedProduct = product;
        }
    }

    private void UnfocusProduct() {
        FocusedProduct = null;
    }

    private void CreateRandomProductButton(EventArgs eventArgs)
    {
        Product product = new Product(
            Guid.NewGuid(),
            _fruitNames[new Random().Next(0, _fruitNames.Count - 1)],
            (decimal) (new Random().Next(1, 100) / 10),
            (decimal) (new Random().Next(1, 100) / 10)
        );
        _dispatcher.Dispatch(new CreateProduct(product));
    }
}