@page "/counter"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using Fluxor
@using FirstBlazorApp.Store
@using FirstBlazorApp.Store.Actions
@using FirstBlazorApp.Models
@using FirstBlazorApp.Store.Fruits.Services
@using FirstBlazorApp.Store.Products.Actions
@using FirstBlazorApp.Store.States
@inject DialogService _dialogService
@inject IState<CounterState> _counterState
@inject IState<FruitState> _fruitState
@inject FruitService _fruitService
@inject IDispatcher _dispatcher
@inject NavigationManager _navigationManager

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @CurrentCount</p>
<p role="status">Alt Counter: @AltCounter</p>

<RadzenButton text="Click me" Click="Confirm"></RadzenButton>
<RadzenButton Disabled="_fruitState.Value.Creating" text="Create Fruit" Click="CreateFruit"></RadzenButton>
<RadzenButton Text="Create Product" Click="AddProduct"></RadzenButton>

@if (!Creating)
{
    <p role="status">Fruits: @Fruits.Count()</p>
}
else
{
    <p role="status">Creating...</p> 
    <div class="spinner"></div>
}

<ul>
    @foreach (Fruit fruit in Fruits)
    {
        <li>@fruit.Name</li>
    }
</ul>

@code {
    private int CurrentCount => _counterState.Value.Count;
    private IEnumerable<Fruit> Fruits => _fruitService.Fruits;
    private bool Creating => _fruitService.Creating;
    private bool Loading => _fruitService.Loading;
    private bool Deleting => _fruitService.Deleting;
    private bool Updating => _fruitService.Updating;

    [Parameter]
    [SupplyParameterFromQuery(Name = "alt_counter")]
    public int AltCounter { get; set; }
    

    private void UpdateUri()
    {
        /*_navigationManager.NavigateTo(_navigationManager.GetUriWithQueryParameters(
            new Dictionary<string, object?>()
            {
                ["alt_counter"] = AltCounter
            }
        ));*/
    }

    private void IncrementCount()
    {
        /*AltCounter = AltCounter + 1;
        _dispatcher.Dispatch(new AddCounter(7));
        UpdateUri();*/
    }

    private void Confirm()
    {
        _dialogService.Confirm(
            "Do you wish to delete selected items?", 
            "Confirm delete", 
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" }
        );
    }

    private void CreateFruit()
    {
        List<string> _fruitNames = new List<string>()
        {
            "apple", "apricot", "avocado", "banana", "bell pepper", "bilberry", "blackberry", "blackcurrant", "blood orange",
            "blueberry", "boysenberry", "breadfruit", "canary melon", "cantaloupe", "cherimoya", "cherry", "chili pepper",
            "clementine", "cloudberry", "coconut", "cranberry", "cucumber", "currant", "damson", "date", "dragonfruit",
            "durian", "eggplant", "elderberry", "feijoa", "fig", "goji berry", "gooseberry", "grape", "grapefruit", "guava",
            "honeydew", "huckleberry", "jackfruit", "jambul", "jujube", "kiwi fruit", "kumquat", "lemon", "lime", "loquat",
            "lychee", "mandarine", "mango", "mulberry", "nectarine", "nut", "olive", "orange", "papaya", "passionfruit",
            "peach", "pear", "persimmon", "physalis", "pineapple", "plum", "pomegranate", "pomelo", "purple mangosteen",
            "quince", "raisin", "rambutan", "raspberry", "redcurrant", "rock melon", "salal berry", "satsuma", "star fruit",
            "strawberry", "tamarillo", "tangerine", "tomato", "ugli fruit", "watermelon"
        };
        _fruitService.AddFruit(new Fruit(
            Guid.NewGuid(), 
            _fruitNames[new Random().Next(0, _fruitNames.Count - 1)]
        ));
    }

    private void AddProduct()
    {

        /*Product product = new Product(
            Guid.NewGuid(),
            _fruitNames[new Random().Next(0, _fruitNames.Count - 1)],
            (decimal) new Random().Next(0, 100) / 10
        );
        _dispatcher.Dispatch(new CreateProduct(product));*/
    }

}