@page "/counter"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using Fluxor
@using FirstBlazorApp.Store
@using FirstBlazorApp.Store.Actions
@using FirstBlazorApp.Models
@inject DialogService _dialogService
@inject IState<CounterState> _counterState
@*@inject IState<FruitState> _fruitState*@
@inject IDispatcher _dispatcher
@inject NavigationManager _navigationManager

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @CurrentCount</p>
<p role="status">Alt Counter: @AltCounter</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me4</button>
<RadzenButton text="Click me" Click="Confirm"></RadzenButton>
<RadzenButton text="Create Random Fruit" Click="CreateFruit"></RadzenButton>
<RadzenButton Text="Create Random Product" Click="AddProduct"></RadzenButton>

@*<p role="status">Fruits: @_fruits.Count()</p>
<ul>
    @foreach (Fruit fruit in _fruits)
    {
        <li>@fruit.Name</li>
    }
</ul>*@

@code {
    private int CurrentCount => _counterState.Value.Count;
    /*private IEnumerable<Fruit> _fruits => _fruitState.Value.Entities.Values;*/

    [Parameter]
    [SupplyParameterFromQuery(Name = "alt_counter")]
    public int AltCounter { get; set; }

    private void UpdateUri()
    {
        _navigationManager.NavigateTo(_navigationManager.GetUriWithQueryParameters(
            new Dictionary<string, object?>()
            {
                ["alt_counter"] = AltCounter
            }
        ));
    }

    private void IncrementCount()
    {
        AltCounter = AltCounter + 1;
        _dispatcher.Dispatch(new AddCounter(7));
        UpdateUri();
    }

    private void Confirm()
    {
        _dialogService.Confirm(
            "Do you wish to delete selected items?", 
            "Confirm delete", 
            new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" }
        );
    }

    private List<string> _fruitNames = new List<string>() {"Apple", "Pear", "Banana", "Cherry"};

    private void CreateFruit()
    {
        _dispatcher.Dispatch(new AddFruit(new Fruit(
            Guid.NewGuid(), 
            _fruitNames[new Random().Next(0, _fruitNames.Count - 1)]
        )));
    }

    private void AddProduct()
    {
        Product product = new Product(
            Guid.NewGuid(),
            _fruitNames[new Random().Next(0, _fruitNames.Count - 1)],
            (decimal) new Random().Next(0, 100) / 10
        );
        _dispatcher.Dispatch(new AddProduct(product));
    }

}